#!/usr/bin/python

'''
Created on Nov 14, 2012

@author: Till Rohrmann
'''


'''
Constants for the directions
'''
NORTH = 0
SOUTH=1
WEST=2
EAST=3

counter = 0

'''
This function reads the result file generated by the SAT solver

@param string filename

@return list int 
	The assignments of the variables
'''
def readResultFile(filename):
    file = open(filename)
    result = []
    
    line = file.readline()
    for line in file:
        result = result + [int(x) for x in line.split() if int(x) != 0];
    
    return result;


'''
This function reads a map file which has to have the following specification:
size
constraintLeftLine1 constraintRightLine1
constraintLeftLine2 constraintRightLine2
...
constraintTopColumn1 constraintBottomColumn1
constraintTopColumn2 constraintBottomColumn2

where all variables are integers

@param string filename

@return (int size, list (int,int) constraints)
	size specifies the size of the skyscraper field
	list (int,int) constraints stores the specified constraints for the rows and columns of the field.
'''
def readFile(filename):
    file = open(filename);
    size = int(file.readline());
    constraints = [];
    for line in file:
        constraints.append(tuple([int(x) for x in line.split()]));
        
    return (size,constraints)


'''
This function encodes the variable specifying for a given field (x,y) a certain skyscraper height (h)

@param int x
@param int y
	field position (x,y) (upper left corner is (0,0))
@param int h
	height value for the specified field (0,...,maxValue-1)

@param int maxValue
	maximum value+1 for (x,y,h) (usually it is the field size)

@return int
	return an integer representing the aforementioned variable
'''
def var(x,y,h,maxValue):
    return h + maxValue*y + maxValue*maxValue*x +1;
    
'''
This function generates helper variables wich are represented by integer values above the domain of the field variables. This function should not be called directly!
'''
def varHelper(x, y, v, size, maxValue):
    return v + maxValue*y + maxValue*size*x+1;
    
'''
Predicate maxSkyscraper(x,y,direction)=height saying seen from the field (x,y) (excluding this field) in the direction "direction" the highest skyscraper has the height "height-1"

@param int x
@param int y
	field

@param int v
	value of maxSkyscraper predicate

@param int dir (see constants defined at the beginning of this file)

@param int size
	field size

@return int
	variable encoded as int representing whether this predicate is true or not
'''
def maxSkyscraper(x, y, v, dir, size):
    offset = 1*numberFieldVariables(size) + dir*numberHelperVariables(size, size+1)
    
    return varHelper(x, y, v, size, size+1) + offset
    
'''
Predicate numberSkyscraper(x,y,direction)=value saying that seen from the edge of the field in the direction "direction" until the field (x,y) one sees "value" skyscrapers.

@param int x
@param int y
	field

@param int v
	number of skyscrapers

@param int dir (see constants defined at the beginning of this file)

@param int size
	field size

@return int
	variable encoded as int representing the truth of this predicate
'''
def numberSkyscraper(x, y, v, dir, size):
    offset = numberFieldVariables(size) + (4+dir)*numberHelperVariables(size, size+1)
    
    return varHelper(x, y, v, size, size+1) + offset
   
'''
Calculation of the number of field and height variables
'''
def numberFieldVariables(size):
    return size**3;
    
def numberHelperVariables(size, maxValue):
    return maxValue + maxValue*(size-1) + maxValue*size*(size-1)
    
'''
This function reserves a helper variable and returns it

@param int size
	field size

@return int
	variable
'''
def helperVariable(size):
    global counter
    offset = numberFieldVariables(size) + 8*numberHelperVariables(size, size+1);
    counter += 1;
    return offset+counter


'''
This function decodes a field variable var(x,y,height) into its components position (x,y), height and value (true,false)

@param int value
	encoded variable

@param int size
	field size

@return (int sign, int line, int column, int height)
'''
def decodeVar(value,size):
    sign = 1;
    if(value < 0):
        sign = -1
        value *= -1
    
    value -=1
    
    height = value%size;
    value = int(value/size)
    column = value%size;
    line = int(value/size);
    
    return (sign,line,column,height)
